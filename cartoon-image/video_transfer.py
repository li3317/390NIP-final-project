# -*- coding: utf-8 -*-
"""video_transfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYGaVNQ85BmnWWYAtZi25miaXn1XcTTK
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive

import cv2
vidcap = cv2.VideoCapture('/content/drive/MyDrive/Video Transfer/Chess club.mp4')
success,image = vidcap.read()
count = 0

while success:
  crop = image[0:700, 0:700]
  resize = cv2.resize(crop, (256, 256))
  cv2.imwrite("/content/drive/MyDrive/Video Transfer/frame%d.jpg" % count, resize) 
  success,image = vidcap.read()
  print('Read a new frame: ', success)
  count += 1

import cv2
import numpy as np
import os
# Input and Output path:
input = '/content/drive/MyDrive/Video Transfer/Chess club.mp4'
output = '/content/drive/MyDrive/Video Transfer/Frames/'
HEIGHT = 256
WIDTH = 256

# Playing video from file:
cap = cv2.VideoCapture(input)

try:
    if not os.path.exists('data'):
        os.makedirs('data')
except OSError:
    print ('Error: Creating directory of data')

currentFrame = 0
while(True):
    # Capture frame-by-frame
    ret, frame = cap.read()
    if not ret: 
      break

    # Saves image of the current frame in jpg file
    # Crop face
    crop = frame[0:700, 0:700]
    # Resize
    resize = cv2.resize(crop, (HEIGHT, WIDTH))
    # Save
    cv2.imwrite(output + 'frame%d.jpg' % currentFrame, resize)

    print ('Creating...' + output)

    # To stop duplicate images
    currentFrame += 1

# When everything done, release the capture
cap.release()
cv2.destroyAllWindows()



# cut all image to desired size

import os
import moviepy.video.io.ImageSequenceClip
# Folder location
image_folder = '/content/drive/MyDrive/Video Transfer/Frames/'
# Output name
video_name = 'my_video.mp4'
# Frame rate
fps=30

# Extract Image and construct video
image_files = [image_folder+'/'+img for img in os.listdir(image_folder) if img.endswith(".jpg")]
clip = moviepy.video.io.ImageSequenceClip.ImageSequenceClip(image_files, fps=fps)
clip.write_videofile(video_name)